// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volume/service/user-flight-tracking/controllers (interfaces: FlightTracker)

// Package mock_flightTracker_controller is a generated GoMock package.
package mock_flightTracker_controller

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFlightTracker is a mock of FlightTracker interface.
type MockFlightTracker struct {
	ctrl     *gomock.Controller
	recorder *MockFlightTrackerMockRecorder
}

// MockFlightTrackerMockRecorder is the mock recorder for MockFlightTracker.
type MockFlightTrackerMockRecorder struct {
	mock *MockFlightTracker
}

// NewMockFlightTracker creates a new mock instance.
func NewMockFlightTracker(ctrl *gomock.Controller) *MockFlightTracker {
	mock := &MockFlightTracker{ctrl: ctrl}
	mock.recorder = &MockFlightTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightTracker) EXPECT() *MockFlightTrackerMockRecorder {
	return m.recorder
}

// GetPath mocks base method.
func (m *MockFlightTracker) GetPath(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPath", arg0, arg1)
}

// GetPath indicates an expected call of GetPath.
func (mr *MockFlightTrackerMockRecorder) GetPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockFlightTracker)(nil).GetPath), arg0, arg1)
}
