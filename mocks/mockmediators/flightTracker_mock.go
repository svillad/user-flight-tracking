// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volume/service/user-flight-tracking/mediators (interfaces: FlightTracker)

// Package mock_flightTracker_mediator is a generated GoMock package.
package mock_flightTracker_mediator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/volume/service/user-flight-tracking/dto"
	models "github.com/volume/service/user-flight-tracking/models"
)

// MockFlightTracker is a mock of FlightTracker interface.
type MockFlightTracker struct {
	ctrl     *gomock.Controller
	recorder *MockFlightTrackerMockRecorder
}

// MockFlightTrackerMockRecorder is the mock recorder for MockFlightTracker.
type MockFlightTrackerMockRecorder struct {
	mock *MockFlightTracker
}

// NewMockFlightTracker creates a new mock instance.
func NewMockFlightTracker(ctrl *gomock.Controller) *MockFlightTracker {
	mock := &MockFlightTracker{ctrl: ctrl}
	mock.recorder = &MockFlightTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightTracker) EXPECT() *MockFlightTrackerMockRecorder {
	return m.recorder
}

// GetFlightsPath mocks base method.
func (m *MockFlightTracker) GetFlightsPath(arg0 context.Context, arg1 models.PathRequest) (dto.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightsPath", arg0, arg1)
	ret0, _ := ret[0].(dto.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightsPath indicates an expected call of GetFlightsPath.
func (mr *MockFlightTrackerMockRecorder) GetFlightsPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightsPath", reflect.TypeOf((*MockFlightTracker)(nil).GetFlightsPath), arg0, arg1)
}
